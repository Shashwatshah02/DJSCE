//Postfix Evaluation

#include <stdio.h>
#include<string.h>
#include<ctype.h>

char stack[100];
int top=-1;

void push(char a);
char pop(void);
int isoperator(char ch);
int precedence(char a);

int main()
{
    int i=0,a,b,c;
    char postfix[100];
    printf("Enter Postfix Expression : ");
    scanf("%s",postfix);
    for(i=0;i<strlen(postfix);i++)
    {
        if(isdigit(postfix[i]))
        {
            push(postfix[i]-48);
        }
        else
        {
            a=pop();
            b=pop();
            switch(postfix[i])
            {
                case '+':
                    c=b+a;
                    break;
                case '-':
                    c=b-a;
                    break;
                case '*':
                    c=b*a;
                    break;
                case '/':
                    c=b/a;
                    break;
            }
            push(c);
        }
    }
    printf("Result is %d",pop());
}

void push(char a)
{
    top=top+1;
    stack[top]=a;
}

char pop(void)
{
    int val=stack[top];
    top=top-1;
    return val;
}







//Infix to Postfix

#include <stdio.h>
#include<string.h>
#include<ctype.h>

char stack[100];
int top=-1;

void push(char a);
char pop(void);
int isoperator(char ch);
int precedence(char a);

int main()
{
    int i=0,j=0,val;
    char infix[100],postfix[100],a;
    printf("Enter Infix Expression : ");
    scanf("%s",infix);
    for(i=0;i<strlen(infix);i++)
    {
        if(isalnum(infix[i]))
        {
            j=j+1;
            postfix[j]=infix[i];
        }
        else if(infix[i]=='(')
        {
            push(infix[i]);
        }
        else if(infix[i]==')')
        {
            while(stack[top]!='(')
            {
                val=pop();
                j=j+1;
                postfix[j]=val;
            }
            top=top-1;
        }
        else if(isoperator(infix[i]))
        {
            while(precedence(stack[top])>precedence(infix[i]))
            {
                val=pop();
                j=j+1;
                postfix[j]=val;
            }
            push(infix[i]);
        }
    
    }
    j=j+1;
    postfix[j]='\0';
    for(i=0;i<=j+1;i++)
    {
        printf("%c",postfix[i]);
    }
}

void push(char a)
{
    top=top+1;
    stack[top]=a;
}

char pop(void)
{
    int val=stack[top];
    top=top-1;
    return val;
}

int isoperator(char ch)
{
    return(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^');
}

int precedence(char a)
{
    if(a=='^')
    {
        return 3;
    }
    else if(a=='*'||a=='/')
    {
        return 2;
    }
    else if(a=='+'||a=='-')
    {
        return 1;
    }
    else
    {
        return -1;
    }
}






//Hashing

#include <stdio.h>

void display(int hashTable[],int size);

int main()
{
    int size,key,h,h1,i,counter=0;
    printf("Enter the Size of the Table : ");
    scanf("%d",&size);
    int hashTable[size];
    for(i=0;i<size;i++)
    {
        hashTable[i]=0;
    }
    while(counter<size)
    {
        printf("\nEnter the Key to Insert : ");
        scanf("%d",&key);
        h=key%size;
        if(hashTable[h]!=0)
        {
            printf("\nCollision at %d",hashTable[h]);
            for(i=1;i<size+1;i++)
            {
                h1=(h+i*i)%size;
                if(hashTable[h1]==0)
                {
                    hashTable[h1]=key;
                    break;
                }
                else
                {
                    printf("\nCollision at %d",hashTable[h1]);
                }
            }
        }
        else
        {
            hashTable[h]=key;
        }
        display(hashTable,size);
    }

    return 0;
}

void display(int hashTable[],int size)
{
    int i;
    printf("\n Hash Table : ");
    for(i=0;i<size;i++)
    {
        printf("%d\t",hashTable[i]);
    }
}





//Max Heap

#include <stdio.h>

int indx=0;
void insertMaxHeap(int heap[],int num,int val);
void heapify(int heap[],int num,int pos);
void heapSort(int heap[],int num);
void display(int heap[],int num);

int main()
{
    int n,val,counter=1;
    printf("Enter the Number of Elements : ");
    scanf("%d",&n);
    int heap[n+1];
    while(counter<n+1)
    {
        printf("\nEnter the Element : ");
        scanf("%d",&val);
        insertMaxHeap(heap,n+1,val);
        display(heap,n+1);
        counter++;
    }
    heapSort(heap,n+1);
    printf("\nSorted Heap : ");
    display(heap,n+1);
    return 0;
}

void insertMaxHeap(int heap[],int num,int val)
{
    int i,p,temp;
    indx+=1;
    heap[indx]=val;
    i=indx;
    while(i>1)
    {
        p=i/2;
        if(heap[p]<heap[i])
        {
            temp=heap[i];
            heap[i]=heap[p];
            heap[p]=temp;
            i=p;
        }
        else
        {
            return;
        }
    }
}

void heapify(int heap[],int num,int pos)
{
    int max,left,right,temp;
    max=pos;
    left=2*pos;
    right=2*pos+1;
    if(left<num && heap[left]>heap[max])
    {
        max=left;
    }
    if(right<num && heap[right]>heap[max])
    {
        max=right;
    }
    if(max!=pos)
    {
        temp=heap[pos];
        heap[pos]=heap[max];
        heap[max]=temp;
        heapify(heap,num,max);
    }
}

void heapSort(int heap[],int num)
{
    int i,temp;
    for(i=num-1;i>1;i--)
    {
        temp=heap[1];
        heap[1]=heap[i];
        heap[i]=temp;
        printf("\nHeap After Swapping : ");
        display(heap,num);
        heapify(heap,i,1);
        printf("\nHeap After Heapify : ");
        display(heap,num);
    }
}

void display(int heap[],int num)
{
    int i;
    printf("\nHeap : ");
    for(i=1;i<num;i++)
    {
        printf("%d\t",heap[i]);
    }
}





//Min Heap

#include <stdio.h>

int indx;
void insertMinHeap(int heap[],int num,int val);
void heapify(int heap[],int num,int pos);
void heapSort(int heap[],int num);
void display(int heap[],int num);

int main()
{
    int n,val,counter=1;
    printf("Enter the Number of Elements : ");
    scanf("%d",&n);
    int heap[n+1];
    while(counter<n+1)
    {
        printf("\nEnter the Element to Insert : ");
        scanf("%d",&val);
        insertMinHeap(heap,n+1,val);
        display(heap,n+1);
        counter++;
    }
    heapSort(heap,n+1);
    printf("Sorted Heap : \n");
    display(heap,n+1);
    return 0;
}

void insertMinHeap(int heap[],int num,int val)
{
    int i,p,temp;
    indx+=1;
    heap[indx]=val;
    i=indx;
    while(i>1)
    {
        p=i/2;
        if(heap[i]<heap[p])
        {
            temp=heap[i];
            heap[i]=heap[p];
            heap[p]=temp;
            i=p;
        }
        else
        {
            return;
        }
    }
}

void heapSort(int heap[],int num)
{
    int i,temp;
    for(i=num-1;i>1;i--)
    {
        temp=heap[1];
        heap[1]=heap[i];
        heap[i]=temp;
        printf("\nHeap After Swapping : ");
        display(heap,num);
        heapify(heap,i,1);
        printf("\nHeap After Heapify : ");
        display(heap,num);
    }
}

void heapify(int heap[],int num,int pos)
{
    int min,left,right,temp;
    min=pos;
    left=2*pos;
    right=2*pos+1;
    if(left<num && heap[left]<heap[min])
    {
        min=left;
    }
    if(right<num && heap[right]<heap[min])
    {
        min=right;
    }
    if(min!=pos)
    {
        temp=heap[pos];
        heap[pos]=heap[min];
        heap[min]=temp;
        heapify(heap,num,min);
    }
}


void display(int heap[],int num)
{
    int i;
    printf("\nHeap : ");
    for(i=1;i<num;i++)
    {
        printf("%d\t",heap[i]);
    }
}


//Polynomial Addition

#include <stdio.h>
#include<stdlib.h>

struct node
{
    int coeff;
    int expo;
    struct node *next;
};

struct node * insert(struct node * head,int coeff,int expo)
{
    struct node *temp;
    struct node *newp=malloc(sizeof(struct node));
    newp->coeff=coeff;
    newp->expo=expo;
    newp->next=NULL;
    if(head==NULL||expo>head->expo)
    {
        newp->next=head;
        head=newp;
    }
    else
    {
        temp=head;
        while(temp->next!=NULL && temp->next->expo>=expo)
        {
            temp=temp->next;
        }
        newp->next=temp->next;
        temp->next=newp;
    }
}


void print(struct node *head)
{
    struct node *temp=head;
    while(temp!=NULL)
    {
        printf("%d^%d",temp->coeff,temp->expo);
        temp=temp->next;
        if(temp!=NULL)
            printf(" + ");
    }
}



struct node * create(struct node *head)
{
    int n,i,coeff,expo;
    printf("\nEnter the Number of Terms : ");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter Coefficient for term %d : ",i+1);
        scanf("%d",&coeff);
        printf("Enter Exponent for term %d : ",i+1);
        scanf("%d",&expo);
        head=insert(head,coeff,expo);
        print(head);
    }
}



int main()
{
    struct node *ptr1,*ptr2,*head3=NULL,*head1=NULL,*head2=NULL;
    printf("Enter the First Polynomial");
    head1=create(head1);
    printf("Enter the Second Polynomial");
    head2=create(head2);
    
    ptr1=head1;
    ptr2=head2;
    while(ptr1!=NULL && ptr2!=NULL)
    {
        if(ptr1->expo==ptr2->expo)
        {
            head3=insert(head3,ptr1->coeff+ptr2->coeff,ptr1->expo);
            ptr1=ptr1->next;
            ptr2=ptr2->next;
        }
        else if(ptr1->expo>ptr2->expo)
        {
            head3=insert(head3,ptr1->coeff,ptr1->expo);
            ptr1=ptr1->next;
        }
        else if(ptr2->expo>ptr1->expo)
        {
            head3=insert(head3,ptr2->coeff,ptr2->expo);
            ptr2=ptr2->next;
        }
    }
    while(ptr1!=NULL)
    {
        head3=insert(head3,ptr1->coeff,ptr1->expo);
        ptr1=ptr1->next;
    }
    while(ptr2!=NULL)
    {
        head3=insert(head3,ptr2->coeff,ptr2->expo);
        ptr2=ptr2->next;
    }
    printf("Resultant Polynomial : ");
    print(head3);
    
}